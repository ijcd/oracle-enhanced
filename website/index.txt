h1. ActiveRecord Oracle enhanced adapter

h1. &#x2192; 'oracle-enhanced'


h2. What

Oracle "enhanced" ActiveRecord adapter contains useful additional methods for working with new and legacy Oracle databases
from Rails which are extracted from current real projects' monkey patches of original Oracle adapter.

h2. Installing

<pre syntax="ruby">sudo gem install activerecord-oracle_enhanced-adapter</pre>

h2. The basics

In Rails config/database.yml file use oracle_enhanced as adapter name.

Create config/initializers/oracle_advanced.rb file in your Rails application and put configuration options there.
The following configuration options are available:

* set to true if columns with DATE in their name should be emulated as Date (and not as Time which is default)
<pre syntax="ruby">
ActiveRecord::ConnectionAdapters::OracleEnhancedAdapter.
  emulate_dates_by_column_name = true
</pre>

* set to true if columns with ID at the end of column name should be emulated as Fixnum (and not as BigDecimal which is default)
<pre syntax="ruby">
ActiveRecord::ConnectionAdapters::OracleEnhancedAdapter.
  emulate_integers_by_column_name = true
</pre>

* set to true if CHAR(1), VARCHAR2(1) columns or or VARCHAR2 columns with FLAG or YN at the end of their name
  should be emulated as booleans (and do not use NUMBER(1) as type for booleans which is default)
<pre syntax="ruby">
ActiveRecord::ConnectionAdapters::OracleEnhancedAdapter.
  emulate_booleans_from_strings = true
</pre>

* specify other date and time formats that should be used when assigning string values to :date and :datetime columns, e.g.:
<pre syntax="ruby">
ActiveRecord::ConnectionAdapters::OracleEnhancedAdapter.instance_eval do
  self.string_to_date_format = "%d.%m.%Y"
  self.string_to_time_format = "%d.%m.%Y %H:%M:%S"
end
</pre>

The following model class methods are available:
* specify which table columns should be ignored by ActiveRecord
<pre syntax="ruby">
ignore_table_columns :column1, :column2, :column3
</pre>

* specify custom create, update and delete methods which should be used instead of Rails generated INSERT, UPDATE and DELETE statements
<pre syntax="ruby">
# should return ID of new record
set_create_method do
  plsql.employees_pkg.create_employee(
    :p_first_name => first_name,
    :p_last_name => last_name,
    :p_employee_id => nil
  )[:p_employee_id]
end
set_update_method do
  plsql.employees_pkg.update_employee(
    :p_employee_id => id,
    :p_first_name => first_name,
    :p_last_name => last_name
  )
end
set_delete_method do
  plsql.employees_pkg.delete_employee(
    :p_employee_id => id
  )
end
</pre>

Oracle enhanced adapter is also compatible with composite_primary_keys gem.

See http://blog.rayapps.com/category/oracle-enhanced for more information.

Look ar RSpec tests under spec directory for usage examples.

h2. Feedback

Submit your feedback as comments "here.":http://blog.rayapps.com

h2. How to submit patches

You can fetch the source from:

* github: "http://github.com/rsim/oracle-enhanced/tree/master":http://github.com/rsim/oracle-enhanced/tree/master

<pre>git clone git://github.com/rsim/oracle-enhanced.git</pre>

h3. Build and test instructions

<pre>cd oracle-enhanced
rake spec
rake install_gem</pre>


h2. License

This code is free to use under the terms of the MIT license. 
